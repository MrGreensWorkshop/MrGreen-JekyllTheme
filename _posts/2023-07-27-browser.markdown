---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id_About_Browser
title: About browser
# post specific
# if not specified, .name will be used from _data/owner/[language].yml
author: Yeonuk
# multiple category is not supported
category: Network
# multiple tag entries are possible
tags: [network, architecture]
# thumbnail image for post
img: ":post_pic1.jpg"
# disable comments on this page
# comments_disable: true

# publish date
date: 2023-07-27 09:00:00 +0900
# seo
# if not specified, date will be used.
#meta_modify_date: 2021-08-10 11:32:53 +0900
# check the meta_common_description in _data/owner/[language].yml
#meta_description: ""

# optional
# please use the "image_viewer_on" below to enable image viewer for individual pages or posts (_posts/ or [language]/_posts folders).
# image viewer can be enabled or disabled for all posts using the "image_viewer_posts: true" setting in _data/conf/main.yml.
#image_viewer_on: true
# please use the "image_lazy_loader_on" below to enable image lazy loader for individual pages or posts (_posts/ or [language]/_posts folders).
# image lazy loader can be enabled or disabled for all posts using the "image_lazy_loader_posts: true" setting in _data/conf/main.yml.
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

### 브라우저에 대하여

{:data-align="center"}

<!-- outline-end -->

늘 사용하는 브라우저에 대해 궁금해본 적이 있나요?
저는 제가 개발한 코드나 프로젝트가 브라우저에 무슨 원리로 렌더링되는가? 보다 내 코드의 life cycle등의 코드 실행 순서에 더 비중을 주는 편이였습니다.
문득 브라우저에 대한 호기심이 생겼고, 이번 기회에 브라우저의 이해를 높이고자 합니다.

우선 사용자가 url에 접근하는 시점부터, 브라우저 영역 안에 웹 콘텐츠들이 보여지기까지 어떤 일이 일어나는지 알아보고자 합니다.

#### 브라우저를 구성하는 것은 무엇일까요?

**바로 '엔진'입니다. **
브라우저는 사실 여러 엔진으로 구성되어 있습니다.
하나의 예시로 Chrome 브라우저를 살펴보면 브라우저 엔진은 Chromium, 렌더링(레이아웃) 엔진은 Blink, JS 런타임(JS엔진)은 V8이라 불립니다.

#### 브라우저 엔진이란?

브라우저 엔진은 사용자가 어떤 액션을 하는 것부터, 화면에 결과물을 그래픽으로 보여주기까지의 과정에 관여합니다.
웹이 점점 발전함에 따라 엔진은 고도화 되었고, 화면에 결과물을 보여주는 렌더링 엔진과 JS 구문을 분석하는 JS 런타임 엔진이 별도로 분리 되었습니다.

#### 렌더링 엔진이란?

렌더링 엔진은 사용자가 요청한 HTML 문서와 CSS를 파싱하여 화면에 그리는 역할을 수행합니다.
브라우저 엔진과 렌더링 엔진의 분류를 명확하게 하지 않는 경우가 많은데 JS 엔진이 브라우저 없이 독립적으로 실행될 수 있는 반면, 렌더링 엔진은 그렇지 않기 때문입니다.

#### 렌더링 엔진 동작 과정

렌더링 엔진은 네트워크 계층으로부터 문서를 전송받습니다.

1. HTML 파싱: 엔진은 이 태그들을 파싱하여 DOM(Document Object Model) node로 변환합니다. node들이 계층 구조로 구성되어 DOM tree로 구축됩니다.
2. CSS 파싱: HTML 파싱이 이루어진 이후, CSS를 파싱하여 CSSOM을 생성합니다.
3. 어테치먼트(렌더트리 생성): 앞서 생성된 DOM tree와 CSSOM을 결합하여, 색상 및 면적 등의 시각적 정보를 담은 Reder tree를 구축할 수 있습니다. 이 과정에서 화면에 표시되지 않는 DOM node는 제외됩니다.
