---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id_About_CORS_3
title: About CORS(3)

# post specific
# if not specified, .name will be used from _data/owner/[language].yml
author: Yeonuk
# multiple category is not supported
category: CORS
# multiple tag entries are possible
tags: [cors, browser policy]
# thumbnail image for post
img: ":post_pic1.jpg"
# disable comments on this page
# comments_disable: true

# publish date
date: 2023-06-14 09:00:00 +0900
# seo
# if not specified, date will be used.
#meta_modify_date: 2021-08-10 11:32:53 +0900
# check the meta_common_description in _data/owner/[language].yml
#meta_description: ""

# optional
# please use the "image_viewer_on" below to enable image viewer for individual pages or posts (_posts/ or [language]/_posts folders).
# image viewer can be enabled or disabled for all posts using the "image_viewer_posts: true" setting in _data/conf/main.yml.
#image_viewer_on: true
# please use the "image_lazy_loader_on" below to enable image lazy loader for individual pages or posts (_posts/ or [language]/_posts folders).
# image lazy loader can be enabled or disabled for all posts using the "image_lazy_loader_posts: true" setting in _data/conf/main.yml.
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

### This is an article about Cross-Origin Resource Sharing (CORS).

{:data-align="center"}

<!-- outline-end -->

#### The provenance comparison process

Let's continue with the details of where and how requests are made, responses are received, and comparisons are made.
Let's explain it through characters and pictures.

##### Characters

1. The client (user or device) sends a request to the browser. This request can be generated on the client side via JavaScript code, HTML form, etc.
2. The browser takes the request from the client and sends a request to the web server based on that request. This request is sent to the web server using the HTTP protocol.
3. The web server processes the request it receives and generates a response to the client. The response is organized in a format that follows the HTTP protocol and can include data or status codes.
4. The browser accepts the response from the web server.
5. The browser compares the origin of the response with the origin of the current page. If the origin is the same, the browser displays the response. This can mean displaying the content of the web page, images, scripts, etc.

##### Illustration

![CORS Structure](:post_cors_3_pic.jpg)
