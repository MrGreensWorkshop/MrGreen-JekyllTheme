---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id_About_useQuery
title: About useQuery

# post specific
# if not specified, .name will be used from _data/owner/[language].yml
author: Yeonuk
# multiple category is not supported
category: Module
# multiple tag entries are possible
tags: [module, hooks]
# thumbnail image for post
img: ":post_pic1.jpg"
# disable comments on this page
# comments_disable: true

# publish date
date: 2023-06-30 09:00:00 +0900
# seo
# if not specified, date will be used.
#meta_modify_date: 2021-08-10 11:32:53 +0900
# check the meta_common_description in _data/owner/[language].yml
#meta_description: ""

# optional
# please use the "image_viewer_on" below to enable image viewer for individual pages or posts (_posts/ or [language]/_posts folders).
# image viewer can be enabled or disabled for all posts using the "image_viewer_posts: true" setting in _data/conf/main.yml.
#image_viewer_on: true
# please use the "image_lazy_loader_on" below to enable image lazy loader for individual pages or posts (_posts/ or [language]/_posts folders).
# image lazy loader can be enabled or disabled for all posts using the "image_lazy_loader_posts: true" setting in _data/conf/main.yml.
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

### About useQuery

{:data-align="center"}

<!-- outline-end -->

When we fetch data from the backend, we want to use useQuery.
But at exactly what point do we want to use useQuery?

#### Concept behind useQuery

useQuery is a hook in the React Query library that is commonly used in React applications to fetch data asynchronously.

#### Reasons to use it

1. data management: useQuery allows you to handle data in a manageable and consistent way. You can conveniently handle tasks like requesting, caching, re-requesting, and updating data. React Query automatically handles state management and caching, so you can maintain the integrity and consistency of your data.
2. auto-render: useQuery can automatically re-render components when data changes to efficiently display updated data. Instead of having to write your own rendering logic whenever data changes, React Query takes care of it, making it simple for developers to reflect updated data.
3. caching and reuse: useQuery automatically caches request results and uses the cached data instead of re-requesting the server for the same data. This can improve performance, reduce network traffic, and lighten the load on the server. In addition, cached data can be reused in other components to reduce duplication of code.
4. error and loading handling: useQuery automatically handles any errors or loading conditions that occur during data requests. It can handle errors if a data request fails, and display loading status while loading data. This allows you to provide users with appropriate status messages and improve UX.
5. Easy data updates: useQuery provides the ability to easily handle data updates. Updating data automatically refreshes the cache and updates the associated components automatically. This helps to keep your data consistent and simplifies the task of updating your UI.

#### Conclusion

Thus, useQuery makes it easier to handle tasks such as data requests, caching, updating, and error handling, and reduces the complexity of managing and updating data. This allows developers to focus on the logic involved in data requests and abstract away data management to improve productivity.

#### Comment

- useQuery also provides a number of advanced features that allow for fine-grained control over data requests. For example, you can control the cache, manage request dependencies, set intervals for re-requesting data, use paging, and more. This makes implementing complex data requirements simple.
- React Query can also be integrated with HTTP clients like Axios to abstract the interaction with the server and simplify API requests. This makes communicating with the server more convenient and helps you maintain consistency in your code.
- Finally, since useQuery comes as part of React Query, you can use it in conjunction with other features of React Query. For example, you can use useMutation to handle requests to modify or create data, or useInfiniteQuery to handle paged data.
