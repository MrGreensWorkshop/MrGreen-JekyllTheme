---
# multilingual page pair id, this must pair with translations of this page. (This name must be unique)
lng_pair: id_About_Bundler(2)
title: About bundler(2)
# post specific
# if not specified, .name will be used from _data/owner/[language].yml
author: Yeonuk
# multiple category is not supported
category: Network
# multiple tag entries are possible
tags: [network, javascript]
# thumbnail image for post
img: ":post_pic1.jpg"
# disable comments on this page
# comments_disable: true

# publish date
date: 2023-07-16 09:00:00 +0900
# seo
# if not specified, date will be used.
#meta_modify_date: 2021-08-10 11:32:53 +0900
# check the meta_common_description in _data/owner/[language].yml
#meta_description: ""

# optional
# please use the "image_viewer_on" below to enable image viewer for individual pages or posts (_posts/ or [language]/_posts folders).
# image viewer can be enabled or disabled for all posts using the "image_viewer_posts: true" setting in _data/conf/main.yml.
#image_viewer_on: true
# please use the "image_lazy_loader_on" below to enable image lazy loader for individual pages or posts (_posts/ or [language]/_posts folders).
# image lazy loader can be enabled or disabled for all posts using the "image_lazy_loader_posts: true" setting in _data/conf/main.yml.
#image_lazy_loader_on: true
# exclude from on site search
#on_site_search_exclude: true
# exclude from search engines
#search_engine_exclude: true
# to disable this page, simply set published: false or delete this file
#published: false
---

<!-- outline-start -->

### About Bundler (2)

{:data-align="center"}

<!-- outline-end -->

In the previous article, we learned about the concept of bundlers and what they do.
In this article, we'll discuss babel, which is often used in conjunction with Webpack, the main module bundler in JS.

Webpack and babel are tools used together in web development, and they have their own roles and features.
Let's start with Webpack first.

#### What is Webpack

Webpack is a module bundler, which means it handles multiple modules and resource files in one bundle.
In web application development, it can handle different kinds of modules such as JavaScript, CSS, images, and more. It identifies the dependencies between modules, loads the required modules, and bundles them together.
It supports different settings in development and production environments to simplify and optimize the development and deployment process.

Next, let's take a look at Babel.

#### What is Babel

It's a JavaScript transpiler that translates ES6 and later syntax to older versions of JavaScript.
It allows you to write code using the latest JavaScript syntax.
It converts the new syntax into backwards-compatible code so that it can run in older browsers.
You can use plugins and presets to apply different transformation rules.

Now that you know what Webpack and Babel are and what they do, you might be wondering why we use them together.

#### Why use Webpack and Babel together

1. Module bundling and transpiling: Webpack performs module bundling, while Babel converts ES6+ code to older versions of JavaScript. By using these two tools together, you can bundle modularized JavaScript code and convert it to executable code, even in environments that don't support the latest syntax.
2. Extensibility and customization: Webpack and Babel support extensibility and customization through plugins, loaders, and presets, respectively. By using Webpack's loader to integrate Babel, you can transform ES6+ code through Babel. This allows you to do more transformations or integrate with other tools.
3. Optimize development productivity and performance: Webpack provides features like development servers and hot module replacement (HMR) to streamline development and make it more responsive. Babel enables developers to develop using modern syntax through code transformation. This can help improve development productivity and application performance.

#### Conclusion

In short, Webpack and Babel are tools that work together for module bundling and transpiling.
Webpack manages the loading and bundling of modules, while Babel translates the latest JavaScript syntax to older versions.
This allows you to efficiently manage your modularized code and produce compatible code.
